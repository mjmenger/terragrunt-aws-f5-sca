#!/bin/bash
# Script must be non-blocking or run in the background.
mkdir -p /config/cloud
cat << 'EOF' > /config/cloud/startup-script.sh
#!/bin/bash
LOG_FILE=${onboard_log}
if [ ! -e $LOG_FILE ]
then
     touch $LOG_FILE
     exec &>>$LOG_FILE
else
    #if file exists, exit as only want to run once
    exit
fi
exec 1>$LOG_FILE 2>&1
function checkInternet () {
host=$1
count=0
while true
do
  STATUS=$(curl -s -k -I $host | grep HTTP)
  if [[ $STATUS == *"HTTP"* ]]; then
    echo "passed $host"
    break
  elif [ $count -le 6 ]; then
    count=$[$count+1]
  else
    echo "failed $host"
    break
  fi
  sleep 10
done
}
checkInternet https://github.com
curl -o /config/cloud/utils.sh -s --fail --retry 60 -m 10 -L https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/develop/scripts/util.sh
. /config/cloud/utils.sh
wait_for_bigip
echo "GET BIG-IP PASSWORD FROM AWS SECRET MANAGER"
role_name=$(curl -s "http://169.254.169.254/latest/meta-data/iam/security-credentials/" )
payload=$(curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/$role_name)
export AWS_ACCESS_KEY_ID=$(printf "$payload" | jq -r ".AccessKeyId")
export AWS_SECRET_ACCESS_KEY=$(printf "$payload" | jq -r ".SecretAccessKey")
export AWS_TOKEN=$(printf "$payload" | jq -r ".Token")
export AWS_REGION=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone| sed s/.$//`
export SECRET_ID=${secret_id}
cat > secrets_manager.py << END_TEXT
# Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#

import sys, os, base64, datetime, hashlib, hmac 
import requests 
import json

access_key = os.environ.get('AWS_ACCESS_KEY_ID')
secret_key = os.environ.get('AWS_SECRET_ACCESS_KEY')
token = os.environ.get('AWS_TOKEN')
region = os.environ.get('AWS_REGION')
secret_id = os.environ.get('SECRET_ID')
if access_key is None:
    print('No access key was provided.')
    sys.exit()
if secret_key is None:
    print('No secret key was provided.')
    sys.exit()
if token is None:
    print('No token was provided.')
    sys.exit()
if region is None:
    print('No region was provided.')
    sys.exit()
if secret_id is None:
    print('No secret_id was provided.')
    sys.exit()

method = 'POST'
service = 'secretsmanager'
host = 'secretsmanager.'+ region + '.amazonaws.com'
endpoint = 'https://secretsmanager.'+ region +'.amazonaws.com/'
content_type = 'application/x-amz-json-1.1'
amz_target = 'secretsmanager.GetSecretValue'


request_parameters =  '{'
request_parameters +=  '"SecretId": "'+ secret_id +'"'
request_parameters +=  '}'

def sign(key, msg):
    return hmac.new(key, msg.encode("utf-8"), hashlib.sha256).digest()

def getSignatureKey(key, date_stamp, regionName, serviceName):
    kDate = sign(('AWS4' + key).encode('utf-8'), date_stamp)
    kRegion = sign(kDate, regionName)
    kService = sign(kRegion, serviceName)
    kSigning = sign(kService, 'aws4_request')
    return kSigning

t = datetime.datetime.utcnow()
amz_date = t.strftime('%Y%m%dT%H%M%SZ')
date_stamp = t.strftime('%Y%m%d') # Date w/o time, used in credential scope
canonical_uri = '/'
canonical_querystring = ''
canonical_headers = 'content-type:' + content_type + '\n' + 'host:' + host + '\n' + 'x-amz-date:' + amz_date + '\n' + 'x-amz-target:' + amz_target + '\n'
signed_headers = 'content-type;host;x-amz-date;x-amz-target'
payload_hash = hashlib.sha256(request_parameters.encode('utf-8')).hexdigest()
canonical_request = method + '\n' + canonical_uri + '\n' + canonical_querystring + '\n' + canonical_headers + '\n' + signed_headers + '\n' + payload_hash
algorithm = 'AWS4-HMAC-SHA256'
credential_scope = date_stamp + '/' + region + '/' + service + '/' + 'aws4_request'
string_to_sign = algorithm + '\n' +  amz_date + '\n' +  credential_scope + '\n' +  hashlib.sha256(canonical_request.encode('utf-8')).hexdigest()
signing_key = getSignatureKey(secret_key, date_stamp, region, service)
signature = hmac.new(signing_key, (string_to_sign).encode('utf-8'), hashlib.sha256).hexdigest()
authorization_header = algorithm + ' ' + 'Credential=' + access_key + '/' + credential_scope + ', ' +  'SignedHeaders=' + signed_headers + ', ' + 'Signature=' + signature
headers = {'Content-Type':content_type,
           'X-Amz-Date':amz_date,
           'X-Amz-Target':amz_target,
           'Authorization':authorization_header,
           'X-Amz-Security-Token': token}
r = requests.post(endpoint, request_parameters, headers=headers)

print(r.text)
END_TEXT
### SET BIG-IP PASSWORD
echo "SET THE BIG-IP PASSWORD"
checkInternet https://secretsmanager.$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone| sed s/.$//).amazonaws.com
pwd=$(python secrets_manager.py | jq -r ".SecretString")
if [ -z "$pwd" ]
then
  echo "ERROR: UNABLE TO OBTAIN PASSWORD"
else
  tmsh modify auth user admin password $pwd
fi
### install atc tools
# start modify appdata directory size
echo "setting app directory size"
tmsh show sys disk directory /appdata
# 130,985,984 26,128,384 52,256,768
tmsh modify /sys disk directory /appdata new-size 52256768
tmsh show sys disk directory /appdata
echo "done setting app directory size"
tmsh save sys config
# end modify appdata directory size
# constants
rpmInstallUrl="/mgmt/shared/iapp/package-management-tasks"
rpmFilePath="/var/config/rest/downloads"
local_host="http://localhost:8100"
doUrl="/mgmt/shared/declarative-onboarding"
doCheckUrl="/mgmt/shared/declarative-onboarding/info"
doTaskUrl="/mgmt/shared/declarative-onboarding/task"
as3Url="/mgmt/shared/appsvcs/declare"
as3CheckUrl="/mgmt/shared/appsvcs/info"
as3TaskUrl="/mgmt/shared/appsvcs/task"
tsUrl="/mgmt/shared/telemetry/declare"
tsCheckUrl="/mgmt/shared/telemetry/info" 
cfUrl="/mgmt/shared/cloud-failover/declare"
cfCheckUrl="/mgmt/shared/cloud-failover/info"
fastCheckUrl="/mgmt/shared/fast/info"
mgmt_port=`tmsh list sys httpd ssl-port | grep ssl-port | sed 's/ssl-port //;s/ //g'`
admin_password='$pwd'
CREDS="admin:$admin_password"
toolsList=$(cat -<<END_TOOLS
{
  "tools": [
      {
        "name": "f5-declarative-onboarding",
        "version": "${doVersion}"
      },
      {
        "name": "f5-appsvcs-extension",
        "version": "${as3Version}"
      },
      {
        "name": "f5-telemetry-streaming",
        "version": "${tsVersion}"
      },
      {
        "name": "f5-cloud-failover-extension",
        "version": "${cfVersion}"
      },
      {
        "name": "f5-appsvcs-templates",
        "version": "${fastVersion}"
      }

  ]
}
END_TOOLS
)

function getAtc () {
atc=$(echo $toolsList | jq -r .tools[].name)
for tool in $atc
do
    version=$(echo $toolsList | jq -r ".tools[]| select(.name| contains (\"$tool\")).version")
    if [ $version == "latest" ]; then
        path=''
    else
        path='tags/v'
    fi
    echo "downloading $tool, $version"
    if [ $tool == "f5-appsvcs-templates" ]; then
        files=$(/usr/bin/curl -sk --interface mgmt https://api.github.com/repos/f5devcentral/$tool/releases/$path$version | jq -r '.assets[] | select(.name | contains (".rpm")) | .browser_download_url')
    else
        files=$(/usr/bin/curl -sk --interface mgmt https://api.github.com/repos/F5Networks/$tool/releases/$path$version | jq -r '.assets[] | select(.name | contains (".rpm")) | .browser_download_url')
    fi
    for file in $files
    do
    echo "download: $file"
    name=$(basename $file )
    mkdir -p /var/config/rest/downloads
    result=$(/usr/bin/curl -Lsk  $file -o /var/config/rest/downloads/$name)
    done
done
}
# download the rpms
getAtc
#
### INSTALL ATC PKGS
rpms=$(find $rpmFilePath -name "*.rpm" -type f)
for rpm in $rpms
do
  filename=$(basename $rpm)
  echo "installing $filename"
  if [ -f $rpmFilePath/$filename ]; then
     postBody="{\"operation\":\"INSTALL\",\"packageFilePath\":\"$rpmFilePath/$filename\"}"
     while true
     do
        iappApiStatus=$(curl -i -u $CREDS  $local_host$rpmInstallUrl | grep HTTP | awk '{print $2}')
        case $iappApiStatus in 
            404)
                echo "api not ready status: $iappApiStatus"
                sleep 2
                ;;
            200)
                echo "api ready starting install task $filename"
                install=$(restcurl -u $CREDS -X POST -d $postBody $rpmInstallUrl | jq -r .id )
                break
                ;;
              *)
                echo "other error status: $iappApiStatus"
                debug=$(restcurl -u $CREDS $rpmInstallUrl)
                echo "ipp install debug: $debug"
                ;;
        esac
    done
  else
    echo " file: $filename not found"
  fi 
  while true
  do
    status=$(restcurl -u $CREDS $rpmInstallUrl/$install | jq -r .status)
    case $status in 
        FINISHED)
            echo " rpm: $filename task: $install status: $status"
            break
            ;;
        STARTED)
            echo " rpm: $filename task: $install status: $status"
            ;;
        RUNNING)
            echo " rpm: $filename task: $install status: $status"
            ;;
        FAILED)
            error=$(restcurl -u $CREDS $rpmInstallUrl/$install | jq .errorMessage)
            echo "failed $filename task: $install error: $error"
            break
            ;;
        *)
            debug=$(restcurl -u $CREDS $rpmInstallUrl/$install | jq . )
            echo "failed $filename task: $install error: $debug"
            ;;
        esac
    sleep 2
    done
done
### validate ATC PKGS
function checkDO() {
    count=0
    while [ $count -le 4 ]
    do
    #doStatus=$(curl -i -u $CREDS $local_host$doCheckUrl | grep HTTP | awk '{print $2}')
    doStatusType=$(restcurl -u $CREDS -X GET $doCheckUrl | jq -r type )
    if [ "$doStatusType" == "object" ]; then
        doStatus=$(restcurl -u $CREDS -X GET $doCheckUrl | jq -r .code)
        if [ $? == 1 ]; then
            doStatus=$(restcurl -u $CREDS -X GET $doCheckUrl | jq -r .result.code)
        fi
    elif [ "$doStatusType" == "array" ]; then
        doStatus=$(restcurl -u $CREDS -X GET $doCheckUrl | jq -r .[].result.code)
    else
        echo "unknown type:$doStatusType"
    fi
    echo "status $doStatus"
    if [[ $doStatus == "200" ]]; then
        #version=$(restcurl -u $CREDS -X GET $doCheckUrl | jq -r .version)
        version=$(restcurl -u $CREDS -X GET $doCheckUrl | jq -r .[].version)
        echo "Declarative Onboarding $version online "
        break
    elif [[ $doStatus == "404" ]]; then
        echo "DO Status: $doStatus"
        bigstart restart restnoded
        sleep 60
        bigstart status restnoded | grep running
        status=$?
        echo "restnoded:$status"
    else
        echo "DO Status $doStatus"
        count=$[$count+1]
    fi
    sleep 10
    done
}
function checkAS3() {
    count=0
    while [ $count -le 4 ]
    do
    #as3Status=$(curl -i -u $CREDS $local_host$as3CheckUrl | grep HTTP | awk '{print $2}')
    as3Status=$(restcurl -u $CREDS -X GET $as3CheckUrl | jq -r .code)
    if  [ "$as3Status" == "null" ] || [ -z "$as3Status" ]; then
        type=$(restcurl -u $CREDS -X GET $as3CheckUrl | jq -r type )
        if [ "$type" == "object" ]; then
            as3Status="200"
        fi
    fi
    if [[ $as3Status == "200" ]]; then
        version=$(restcurl -u $CREDS -X GET $as3CheckUrl | jq -r .version)
        echo "As3 $version online "
        break
    elif [[ $as3Status == "404" ]]; then
        echo "AS3 Status $as3Status"
        bigstart restart restnoded
        sleep 60
        bigstart status restnoded | grep running
        status=$?
        echo "restnoded:$status"
    else
        echo "AS3 Status $as3Status"
        count=$[$count+1]
    fi
    sleep 10
    done
}
function checkTS() {
    count=0
    while [ $count -le 4 ]
    do
    tsStatus=$(curl -si -u $CREDS $local_host$tsCheckUrl | grep HTTP | awk '{print $2}')
    if [[ $tsStatus == "200" ]]; then
        version=$(restcurl -u $CREDS -X GET $tsCheckUrl | jq -r .version)
        echo "Telemetry Streaming $version online "
        break
    else
        echo "TS Status $tsStatus"
        count=$[$count+1]
    fi
    sleep 10
    done
}
function checkCF() {
    count=0
    while [ $count -le 4 ]
    do
    cfStatus=$(curl -si -u $CREDS $local_host$cfCheckUrl | grep HTTP | awk '{print $2}')
    if [[ $cfStatus == "200" ]]; then
        version=$(restcurl -u $CREDS -X GET $cfCheckUrl | jq -r .version)
        echo "Cloud failover $version online "
        break
    else
        echo "Cloud Failover Status $cfStatus"
        count=$[$count+1]
    fi
    sleep 10
    done
}
function checkFAST() {
    count=0
    while [ $count -le 4 ]
    do
    fastStatus=$(curl -si -u $CREDS $local_host$fastCheckUrl | grep HTTP | awk '{print $2}')
    if [[ $fastStatus == "200" ]]; then
        version=$(restcurl -u $CREDS -X GET $fastCheckUrl | jq -r .version)
        echo "FAST $version online "
        break
    else
        echo "FAST Status $fastStatus"
        count=$[$count+1]
    fi
    sleep 10
    done
}
function checkATC() {
    doStatus=$(checkDO)
    as3Status=$(checkAS3)
    tsStatus=$(checkTS)
    cfStatus=$(checkCF)
    fastStatus=$(checkFAST)
    if [[ $doStatus == *"online"* ]] && [[ "$as3Status" = *"online"* ]] && [[ $tsStatus == *"online"* ]] && [[ $cfStatus == *"online"* ]] && [[ $cfStatus == *"online"* ]] ; then 
        echo "ATC is ready to accept API calls"
    else
        echo "ATC install failed or ATC is not ready to accept API calls"
        break
    fi   
}
checkATC
# TMSH Networking
mgmtAddr=$(ip route get 1 | awk '{print $NF;exit}')
mgmtGateway=$(ip route get 1 | awk '{print $3;exit}')
externalGateway="${externalGateway}"
externalNetwork="${externalNetwork}"
externalMask="$(echo $externalNetwork | cut -d "/" -f2)"
applicationGateway="${applicationGateway}"
applicationNetwork="${applicationNetwork}"
applicationMask="$(echo $applicationNetwork | cut -d "/" -f2)"
internalGateway="${dmzOutsideGateway}"
internalNetwork="${dmzOutsideNetwork}"
syncNetwork="${syncNetwork}"
internalMask="$(echo $internalNetwork | cut -d "/" -f2)"
networkMacs=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/)
for macAddr in $networkMacs
do
    mac=$(echo $macAddr | cut -d "/" -f1)
    net=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$mac/subnet-ipv4-cidr-block/)
    if [ "$net" == "$externalNetwork" ]; then
    externalIp=$(curl -s --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/$mac/local-ipv4s)
    echo "external: $mac $net $externalIp"
    fi
    if [ "$net" == "$applicationNetwork" ]; then
    applicationIp=$(curl -s --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/$mac/local-ipv4s)
    echo "application: $mac $net $applicationIp"
    fi
    if [ "$net" == "$internalNetwork" ]; then
    internalIp=$(curl -s --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/$mac/local-ipv4s)
    echo "internal: $mac $net $internalIp"
    fi
done
echo -e "create cli transaction;
modify sys db config.allow.rfc3927 value enable;
create /auth partition LOCAL_ONLY;
modify /sys folder /LOCAL_ONLY device-group none traffic-group /Common/traffic-group-local-only;
create /sys management-route /LOCAL_ONLY/metadata-route network 169.254.169.254/32 gateway $mgmtGateway;
submit cli transaction" | tmsh -q
echo  -e "create cli transaction;
create net vlan external interfaces add { 1.1 };
create net vlan application interfaces add { 1.2 };
create net vlan internal interfaces add { 1.3 };
submit cli transaction" | tmsh -q
echo  -e "create cli transaction;
create net self external-self address $externalIp/$externalMask vlan external;
create net self application-self address $applicationIp/$applicationMask vlan application allow-service default;
create net self internal-self address $internalIp/$internalMask vlan internal;
submit cli transaction" | tmsh -q
echo -e "create cli transaction;
create net route /LOCAL_ONLY/default network 0.0.0.0/0 gw $externalGateway
create net route /LOCAL_ONLY/application network $syncNetwork gw $applicationGateway
create net route /LOCAL_ONLY/internal network 10.0.0.0/8 gw $internalGateway
submit cli transaction" | tmsh -q 
# END TMSH NETWORKING
### Clean up
rm /config/cloud/startup-script.sh 
date
echo "FINISHED STARTUP SCRIPT"
EOF
# Now run in the background to not block startup
chmod 755 /config/cloud/startup-script.sh 
nohup /config/cloud/startup-script.sh &